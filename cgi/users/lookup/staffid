use EPrints;
use strict;

my $repo = EPrints::Session->new();

my $content = "text/xml";
$repo->send_http_header( content_type => $content );

my $family = $repo->param( "_name_family" );
my $given = $repo->param( "_name_given" );
my $id = $repo->param( "_id" );

my $database = $repo->get_database;
my $dataset = $repo->get_repository->get_dataset( "user" );
my $name_field = $dataset->get_field( "name" );
my $email_field = $dataset->get_field( "email" );
my $dept_field = $dataset->get_field( "dept" );

# field to use as creator/editor/contributor_id
my $id_fieldname = $repo->config( "staffid_field" ) || "staffid";
my $id_field = $dataset->get_field( $id_fieldname );

my @fields = ($name_field->get_sql_names, $email_field->get_sql_names, $id_field->get_sql_names, $dept_field->get_sql_names);

my $Q_table = $database->quote_identifier($dataset->get_sql_table_name);
my $Q_usertype = $database->quote_identifier( "usertype" );
my $Q_id = $database->quote_identifier( $id_fieldname );

my $sql = "SELECT " . join(",", map { $database->quote_identifier($_) } @fields ) .
	" FROM $Q_table" .
	" WHERE $Q_usertype !=".$database->quote_value( "minuser" ) .
	" AND $Q_id IS NOT NULL ";
if( EPrints::Utils::is_set( $family ) )
{
	$sql .= " AND ".$database->quote_identifier("name_family").$database->sql_LIKE().$database->quote_value(EPrints::Database::prep_like_value($family).'%');
}
if( EPrints::Utils::is_set( $given ) )
{
	$sql .= " AND ".$database->quote_identifier("name_given").$database->sql_LIKE().$database->quote_value(EPrints::Database::prep_like_value($given).'%');
}
if( EPrints::Utils::is_set( $id ) )
{
	$sql .= " AND ".$database->quote_identifier($id_field->get_name).$database->sql_LIKE().$database->quote_value(EPrints::Database::prep_like_value($id).'%');
}
$sql .= "ORDER BY " .
	$database->quote_identifier("name_family").",".
	$database->quote_identifier("name_given");

my @rows;

my $sth = $repo->get_database->prepare_select( $sql, 'limit' => 40 );
$repo->get_database->execute( $sth , $sql );
while( my @row = $sth->fetchrow_array )
{
	my $name = $name_field->value_from_sql_row( $repo, \@row );
	my $email = $email_field->value_from_sql_row( $repo, \@row );
	my $id = $id_field->value_from_sql_row( $repo, \@row );
	my $dept = $dept_field->value_from_sql_row( $repo, \@row );

	my $item = {};
	push @rows, $item;

	my $frag = $repo->make_doc_fragment;

	$frag->appendChild( $name_field->render_single_value( $repo, $name ) );
	$frag->appendChild( $repo->make_text( " (" ) );
	$frag->appendChild( $email_field->render_single_value( $repo, $email ) );
	$frag->appendChild( $repo->make_text( " )" ) );
	if( EPrints::Utils::is_set( $dept ) )
	{
		$frag->appendChild( $repo->make_element( "br" ) );
		$frag->appendChild( $dept_field->render_single_value( $repo, $dept ) );
	}

	$item->{xhtml} = $frag;
	$item->{values} = [
		"for:value:relative:_name_family" => $name->{family},
		"for:value:relative:_name_given" => $name->{given},
		"for:value:relative:_name_honourific" => $name->{honourific},
		"for:value:relative:_name_lineage" => $name->{lineage},
		"for:value:relative:_id" => $id,
	];
}

$sth->finish();

my $ul = EPrints::Extras::render_lookup_list( $repo, \@rows );

$repo->send_http_header( content_type => "text/xml; charset=UTF-8" );

binmode(STDOUT,":utf8");
print <<END;
<?xml version="1.0" encoding="UTF-8" ?>

END
print EPrints::XML::to_string( $ul, "utf-8", 1 );

EPrints::XML::dispose( $ul );

$repo->terminate;
